// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  user
}

enum UserStatus {
  enable
  disable
}

enum QueryStatus {
  loading
  failed
  success
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  password   String
  nickname   String
  avatar     String     @default("https://www.araden.top/avatar.jpg")
  role       Role       @default(user)
  email      String?
  createTime DateTime   @default(now())
  status     UserStatus @default(enable)
  queries    Query[]
}

model Rule {
  id        String     @id @default(uuid())
  name      String
  base      String
  resolve   Json
  parameter Json
  rules     RuleItem[]
  queries   Query[]
  depth     Int
}

model RuleItem {
  id        String @id @default(uuid())
  name      String
  method    String
  path      String
  resolve   Json
  parameter Json
  order     Int
  Rule      Rule   @relation(fields: [ruleId], references: [id])
  ruleId    String
}

model Query {
  id         String      @id @default(uuid())
  name       String
  rule       Rule        @relation(fields: [ruleId], references: [id])
  ruleId     String
  network    Json
  analyse    Json
  createAt   DateTime    @default(now())
  operator   User        @relation(fields: [operatorId], references: [id])
  operatorId Int
  status     QueryStatus @default(loading)
}

// Mock Nowcoder
enum NGender {
  male
  female
}

enum NEnterpriseType {
  fieldwork
  hired
  formal
}

model NJob {
  jobId   Int     @id @default(autoincrement())
  jobName String  @unique
  users   NUser[]
}

model NSchool {
  schoolId   Int     @id @default(autoincrement())
  schoolName String  @unique
  users      NUser[]
}

model NEnterprise {
  id             Int     @id @default(autoincrement())
  enterpriseName String  @unique
  users          NUser[]
}

model NPost {
  id       String   @id @default(uuid())
  title    String
  content  String
  likes    Int      @default(0)
  comments Int      @default(0)
  retweets Int      @default(0)
  tags     Json?
  type     String?
  postAt   DateTime @default(now())
  postBy   NUser    @relation(fields: [userId], references: [userId])
  userId   Int
}

model NUser {
  userId         Int      @id @default(autoincrement())
  nickname       String
  gender         NGender?
  headImgUrl     String?
  workTime       String?
  enterpriseInfo String?

  job   NJob? @relation(fields: [jobId], references: [jobId])
  jobId Int?

  school   NSchool? @relation(fields: [schoolId], references: [schoolId])
  schoolId Int?

  enterprise     NEnterprise?     @relation(fields: [enterpriseId], references: [id])
  enterpriseId   Int?
  enterpriseType NEnterpriseType?

  posts NPost[]

  followers  NUser[] @relation("follow")
  followings NUser[] @relation("follow")
}
